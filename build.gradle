plugins {
    id 'java'
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id "org.asciidoctor.convert" version "1.5.3"
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
}

def env = project.hasProperty('env') ? project.property('env') : 'local'
def fullTestOutput = project.hasProperty('fullTestOutput') ? project.property('fullTestOutput') : true

ext {
    snippetsDir = file('build/generated-snippets')
}

// You can define more than one repository for resolving dependencies.
// Declaring multiple repositories is helpful if some dependencies are only available in one repository but not the other.

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" } // Declaring a custom repository by URL
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-webflux'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    compile group: 'org.liquibase', name: 'liquibase-core', version: '3.6.3'
    compile 'org.springframework.boot:spring-boot-starter-integration'
    compile 'org.springframework.integration:spring-integration-jdbc'
    compile group: 'org.springframework.boot', name: 'spring-boot-devtools'

    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.6'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.6'

    runtime group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'
    testCompile group: 'org.springframework.restdocs', name: 'spring-restdocs-webtestclient'
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

task startServices(type: Exec) {
    group = 'Docker Services'
    description = 'Start docker containers used for development.'

    commandLine 'docker-compose', 'up', '-d'
}

task stopServices(type: Exec) {
    group = 'Docker Services'
    description = 'Stop docker containers used for development.'

    commandLine 'docker-compose', 'down'
}

test {
    useJUnitPlatform()
    testLogging {
        if (fullTestOutput == true) {
            showStandardStreams = true
        }
        events "passed", "failed", "skipped"
    }

    reports {
        html.enabled = true
    }

    outputs.dir snippetsDir

    if (project.hasProperty('env')) {
        systemProperties.put('spring.profiles.active', env)
    }
}

asciidoctor {
    sourceDir file('src/main/asciidoc')
    inputs.dir snippetsDir
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/'
    }
}

// make sure services are running for test and bootRun in a local environment
if (env == 'local') {
    test.dependsOn(startServices)
    bootRun.dependsOn(startServices)
}
